
=head1 rdiez's Tools

This repository contains some tools that I have written over the years. I hope that you find them useful too!

I have invested some extra time into making the tools robust and giving them reasonable help texts. Please send feedback to rdiezmail-tools at yahoo.de

The tools are:

=over

=item * B<< background.sh >>

Runs the given process with a low priority and displays a visual notification when finished.

=item * B<< copy-with-rsync.sh >> and B<< move-with-rsync.sh >>

If you often copy around large amounts of data, want to resume interrupted transfers, and can never remember rsync's flags,
copy-with-rsync.sh should help.

If you try to move files and subdirectores with 'mv' overwriting any existing ones,
you may come across the infamous "directory not empty" error message.
Script move-with-rsync.sh uses rsync to work-around this issue.

=item * B<< mount-windows-shares.sh >>

Script templates to help mount Windows network file shares with the traditional Linux I<< mount >> method
or with GVFS/FUSE (so that you do not need I<< root >> privileges).

=item * B<< print-arguments-wrapper.sh >>

When writing complex shell scripts, sometimes you wonder if a particular process is getting the right arguments and the right environment variables. Just prefix a command with the name of this script, and it will dump all arguments and environment variables to the console before starting the child process.

=item * B<< pipe-to-emacs-server.sh >>

Helps you pipe the output of a shell console command to a new emacs window.

=item * B<< run-in-new-console.sh >>

Runs the given shell command in a new console window.

=item * B<< takeownership.sh >>

Little convenience script to take ownership of a given file or directory.

=item * B<< RotateDir.pl >>

If you keep running a process that generates a big directory tree every time (like building a compiler toolchain overnight), and you only want to keep the most recent file trees, this directory rotation tool will automatically prune the older ones for you.

=item * B<< ConvertBitmapToSourceCode.pl >>

Converts a bitmap in Portable Pixmap format (PPM) format, monochrome or RGB565, into a C++ array. RGB565 is a very popular 16-bit color depth format among small hardware devices.

=item * B<< decode-jtag-idcode.pl >>

Breaks a JTAG IDCODE up into fields as specified in IEEE standard 1149.1. Example output:

 % perl decode-jtag-idcode.pl 0x4BA00477
 Decoding of JTAG IDCODE 0x4BA00477 (1268778103, 0b01001011101000000000010001110111):
 Version:      0b0100  (0x4, 4)
 Part number:  0b1011101000000000  (0xBA00, 47616)
 Manufacturer: 0b01000111011  (0x23B, 571)  # Name: ARM Ltd.
 Leading bit:  1  # Always set to 1 according to the IEEE standard 1149.1

=item * B<< FindUsbSerialPort.sh >>

Finds the device file associated to a USB virtual serial port. You can search
for any combination of USB Vendor ID, Product ID, Serial Number, etc.

=item * B<< RunBundledScriptAfterDelay.sh >>

Changes to the directory where this script resides, resolving any symbolic links
used to start it, and runs another script after the given delay. Useful to
start delayed tasks from KDE's braindead "autostart" feature. Otherwise,
you'll have to write a little script with the right full path and an eventual
I<< sleep >> statement every time.

=item * B<< email-news-feeds.sh >>

Helper script to automatically run tool 'rss2email' after every login, in order to get your news
conveniently delivered to your mailbox.

=item * B<< zram Statistics >>

Displays some system memory statistics specifically aimed at L<< zram|http://en.wikipedia.org/wiki/Zram >> swap partitions.

=item * B<< script-speed-test.sh >>

Simple script template to measure how long it takes to run some test script code
a given number of iterations.

=item * B<< synthetic-task.sh >>

Helps you create simple, dummy computing tasks that run in a given number of child processes for a given number of iterations.
Useful for load testing.

=item * B<< DownloadAndBuildAutotools.sh >>

Downloads, builds and installs any desired versions of the GNU autotools (autoconf + automake).

=item * B<< DownloadTarball.sh >>

Reliably downloads a tarball by checking its integrity before
committing the downloaded file to the destination directory.

=item * B<< BackupFiles >>

Script templates to help backup files.

=item * B<< BackupWikiPages.sh >>

Downloads a set of Wiki pages in several formats from a MediaWiki server.

=item * B<< ReplaceTemplatePlaceholderWithFileContents.sh and ReplaceTemplatePlaceholders.sh >>

These tools read a template text file and replace all occurrences
of the given placeholder strings with the contents of another file
or with the given command-line arguments.

=item * B<< CheckVersion.sh >>

Helps generate an error or warning message if a given version number
is different/less than/etc. compared to a reference version number.

=item * B<< git-revert-file-permissions.sh >>

Several Git helpers, see the Git/ subdir.

=item * B<< Fake Replacement for Debian Package I<< apt-xapian-index >> >>

It is well known (as of may 2014) that I<< update-apt-xapian-index >> consumes loads of
memory and can easily render a computer with only 512 MiB of RAM unusable.

This fake APT package helps get rid of the whole I<< apt-xapian-index >> package in Ubuntu
or Debian systems without collateral dependency damage.

=item * B<< I<< mlocate >> Conflicting Package >>

Install this package to prevent Debian packages I<< locate >> and I<< mlocate >> from ever being installed again.

=back

Most tools are licensed under the AGPLv3, see file F<< agpl-3.0.txt >> for details.

I have also written an article about making disk images with progress indication, see subdirectory F<< DiskImagesWithProgress >>.
